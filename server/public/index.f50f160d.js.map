{"mappings":"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","sources":["<anon>","src/js/wnp.js"],"sourcesContent":["var $2adbdd4d4d2317fc$exports = {};\n// =======================================================\n// WiiM Now Playing\n// Namespacing\nwindow.WNP = window.WNP || {};\n// Default settings\nWNP.s = {\n    rndAlbumArtUri: \"./img/fake-album-1.jpg\"\n};\n// Data placeholders.\nWNP.d = {\n    serverSettings: null,\n    deviceList: null,\n    prevTransportState: null,\n    prevPlayMedium: null,\n    prevSourceIdent: null\n};\n/**\r\n * Initialisation of app.\r\n * @returns {undefined}\r\n */ WNP.Init = function() {\n    console.log(\"WNP\", \"Initialising...\");\n    // Init Socket.IO, connect to port where server resides\n    // Normally on port 80, but in cases where another port is chosen adapt\n    if (location.port != \"80\" && location.port != \"1234\") {\n        console.log(\"WNP\", \"Listening on \" + location.href);\n        window.socket = io.connect(\":\" + location.port);\n    } else {\n        console.log(\"WNP\", \"Listening on \" + location.hostname + \":80\");\n        window.socket = io.connect(\":80\");\n    }\n    // Set Socket.IO definitions\n    this.setSocketDefinitions();\n    // Set UI event listeners\n    this.setUIListeners();\n    // Initial calls, wait a bit for socket to start\n    setTimeout(()=>{\n        socket.emit(\"server-settings\");\n        socket.emit(\"devices-get\");\n    }, 500);\n    // Create random album intervals, every 3 minutes\n    WNP.s.rndAlbumArtUri = WNP.rndAlbumArt(\"fake-album-\");\n    var rndAlbumInterval = setInterval(function() {\n        WNP.s.rndAlbumArtUri = WNP.rndAlbumArt(\"fake-album-\");\n    }, 180000);\n};\n/**\r\n * Setting the listeners on the UI elements of the app.\r\n * @returns {undefined}\r\n */ WNP.setUIListeners = function() {\n    console.log(\"WNP\", \"Set UI Listeners...\");\n    // ------------------------------------------------\n    // Player buttons\n    btnPrev.addEventListener(\"click\", function() {\n        var wnpAction = this.getAttribute(\"wnp-action\");\n        if (wnpAction) {\n            this.disabled = true;\n            socket.emit(\"device-action\", wnpAction);\n        }\n    });\n    btnPlay.addEventListener(\"click\", function() {\n        var wnpAction = this.getAttribute(\"wnp-action\");\n        if (wnpAction) {\n            this.disabled = true;\n            socket.emit(\"device-action\", wnpAction);\n        }\n    });\n    btnNext.addEventListener(\"click\", function() {\n        var wnpAction = this.getAttribute(\"wnp-action\");\n        if (wnpAction) {\n            this.disabled = true;\n            socket.emit(\"device-action\", wnpAction);\n        }\n    });\n    // ------------------------------------------------\n    // Settings buttons\n    btnRefresh.addEventListener(\"click\", function() {\n        socket.emit(\"devices-refresh\");\n        // Wait for discovery to finish\n        setTimeout(()=>{\n            socket.emit(\"devices-get\");\n            socket.emit(\"server-settings\");\n        }, 5000);\n    });\n    deviceChoices.addEventListener(\"change\", function() {\n        socket.emit(\"device-set\", this.value);\n    });\n    btnReboot.addEventListener(\"click\", function() {\n        socket.emit(\"server-reboot\");\n    });\n    btnUpdate.addEventListener(\"click\", function() {\n        socket.emit(\"server-update\");\n    });\n    btnShutdown.addEventListener(\"click\", function() {\n        socket.emit(\"server-shutdown\");\n    });\n    btnReloadUI.addEventListener(\"click\", function() {\n        location.reload();\n    });\n};\n/**\r\n * Set the socket definitions to listen for specific websocket traffic and handle accordingly.\r\n * @returns {undefined}\r\n */ WNP.setSocketDefinitions = function() {\n    console.log(\"WNP\", \"Setting Socket definitions...\");\n    // On server settings\n    socket.on(\"server-settings\", function(msg) {\n        // Store server settings\n        WNP.d.serverSettings = msg;\n        // RPi has bash, so possibly able to reboot/shutdown.\n        if (msg.os.userInfo.shell === \"/bin/bash\") {\n            btnReboot.disabled = false;\n            btnUpdate.disabled = false;\n            btnShutdown.disabled = false;\n        }\n        // Set device name\n        if (msg.selectedDevice && msg.selectedDevice.friendlyName) devName.innerText = msg.selectedDevice.friendlyName;\n        // Set the server url(s) under the settings modal\n        if (msg && msg.os && msg.os.hostname) {\n            var sUrl = \"http://\" + msg.os.hostname.toLowerCase() + \".local\";\n            sUrl += location && location.port && location.port != 80 ? \":\" + location.port + \"/\" : \"/\";\n            sServerUrlHostname.children[0].innerHTML = \"<a href=\\\"\" + sUrl + \"\\\">\" + sUrl + \"</a>\";\n        } else sServerUrlHostname.children[0].innerText = \"-\";\n        if (msg && msg.selectedDevice && msg.selectedDevice.location && msg.os && msg.os.networkInterfaces) {\n            // Grab the ip address pattern of the selected device\n            // Assumption is that the wiim-now-playing server is on the same ip range as the client..\n            var sLocationIp = msg.selectedDevice.location.split(\"/\")[2]; // Extract ip address from location\n            var aIpAddress = sLocationIp.split(\".\"); // Split ip address in parts\n            aIpAddress.pop(); // Remove the last part\n            var sIpPattern = aIpAddress.join(\".\"); // Construct ip address pattern\n            // Search for server ip address(es) in this range...\n            Object.keys(msg.os.networkInterfaces).forEach(function(key, index) {\n                var sIpFound = msg.os.networkInterfaces[key].find((addr)=>addr.address.startsWith(sIpPattern));\n                if (sIpFound) {\n                    // Construct ip address and optional port\n                    var sUrl = \"http://\" + sIpFound.address;\n                    sUrl += location && location.port && location.port != 80 ? \":\" + location.port + \"/\" : \"/\";\n                    sServerUrlIP.children[0].innerHTML = \"<a href=\\\"\" + sUrl + \"\\\">\" + sUrl + \"</a>\";\n                }\n            });\n        } else sServerUrlIP.children[0].innerText = \"-\";\n    });\n    // On devices get\n    socket.on(\"devices-get\", function(msg) {\n        // Store and sort device list\n        WNP.d.deviceList = msg;\n        WNP.d.deviceList.sort((a, b)=>{\n            return a.friendlyName < b.friendlyName ? -1 : 1;\n        });\n        // Clear choices\n        deviceChoices.innerHTML = \"<option value=\\\"\\\">Select a device...</em></li>\";\n        // Add WiiM devices\n        var devicesWiiM = WNP.d.deviceList.filter((d)=>{\n            return d.manufacturer.startsWith(\"Linkplay\");\n        });\n        if (devicesWiiM.length > 0) {\n            var optGroup = document.createElement(\"optgroup\");\n            optGroup.label = \"WiiM devices\";\n            devicesWiiM.forEach((device)=>{\n                var opt = document.createElement(\"option\");\n                opt.value = device.location;\n                opt.innerText = device.friendlyName;\n                opt.title = \"By \" + device.manufacturer;\n                if (WNP.d.serverSettings && WNP.d.serverSettings.selectedDevice && WNP.d.serverSettings.selectedDevice.location === device.location) opt.setAttribute(\"selected\", \"selected\");\n                optGroup.appendChild(opt);\n            });\n            deviceChoices.appendChild(optGroup);\n        }\n        // Other devices\n        var devicesOther = WNP.d.deviceList.filter((d)=>{\n            return !d.manufacturer.startsWith(\"Linkplay\");\n        });\n        if (devicesOther.length > 0) {\n            var optGroup = document.createElement(\"optgroup\");\n            optGroup.label = \"Other devices\";\n            devicesOther.forEach((device)=>{\n                var opt = document.createElement(\"option\");\n                opt.value = device.location;\n                opt.innerText = device.friendlyName;\n                opt.title = \"By \" + device.manufacturer;\n                if (WNP.d.serverSettings && WNP.d.serverSettings.selectedDevice && WNP.d.serverSettings.selectedDevice.location === device.location) opt.setAttribute(\"selected\", \"selected\");\n                optGroup.appendChild(opt);\n            });\n            deviceChoices.appendChild(optGroup);\n        }\n        if (devicesWiiM.length == 0 && devicesOther.length == 0) deviceChoices.innerHTML = \"<option disabled=\\\"disabled\\\">No devices found!</em></li>\";\n    });\n    // On state\n    socket.on(\"state\", function(msg) {\n        if (!msg) return false;\n        // console.log(msg);\n        // Get player progress data from the state message.\n        var timeStampDiff = 0;\n        if (msg.CurrentTransportState === \"PLAYING\") timeStampDiff = msg.stateTimeStamp && msg.metadataTimeStamp ? Math.round((msg.stateTimeStamp - msg.metadataTimeStamp) / 1000) : 0;\n        var relTime = msg.RelTime ? msg.RelTime : \"00:00:00\";\n        var trackDuration = msg.TrackDuration ? msg.TrackDuration : \"00:00:00\";\n        // Get current player progress and set UI elements accordingly.\n        var playerProgress = WNP.getPlayerProgress(relTime, trackDuration, timeStampDiff, msg.CurrentTransportState);\n        progressPlayed.children[0].innerText = playerProgress.played;\n        progressLeft.children[0].innerText = playerProgress.left != \"\" ? \"-\" + playerProgress.left : \"\";\n        progressPercent.setAttribute(\"aria-valuenow\", playerProgress.percent);\n        progressPercent.children[0].setAttribute(\"style\", \"width:\" + playerProgress.percent + \"%\");\n        // Device transport state or play medium changed...?\n        if (WNP.d.prevTransportState !== msg.CurrentTransportState || WNP.d.prevPlayMedium !== msg.PlayMedium) {\n            if (msg.CurrentTransportState === \"TRANSITIONING\") {\n                btnPlay.children[0].className = \"bi bi-circle-fill\";\n                btnPlay.disabled = true;\n            }\n            if (msg.CurrentTransportState === \"PLAYING\") {\n                // Radio live streams are preferrentialy stopped as pausing keeps cache for minutes/hours(?).\n                // Stop > Play resets the stream to 'now'. Pause works like 'live tv time shift'.\n                if (msg.PlayMedium && msg.PlayMedium === \"RADIO-NETWORK\") {\n                    btnPlay.children[0].className = \"bi bi-stop-circle-fill\";\n                    btnPlay.setAttribute(\"wnp-action\", \"Stop\");\n                } else {\n                    btnPlay.children[0].className = \"bi bi-pause-circle-fill\";\n                    btnPlay.setAttribute(\"wnp-action\", \"Pause\");\n                }\n                btnPlay.disabled = false;\n            } else if (msg.CurrentTransportState === \"PAUSED_PLAYBACK\" || msg.CurrentTransportState === \"STOPPED\") {\n                btnPlay.children[0].className = \"bi bi-play-circle-fill\";\n                btnPlay.setAttribute(\"wnp-action\", \"Play\");\n                btnPlay.disabled = false;\n            }\n            WNP.d.prevTransportState = msg.CurrentTransportState; // Remember the last transport state\n            WNP.d.prevPlayMedium = msg.PlayMedium; // Remember the last PlayMedium\n        }\n        // If internet radio, there is no skipping... just start and stop!\n        if (msg.PlayMedium && msg.PlayMedium === \"RADIO-NETWORK\") {\n            btnPrev.disabled = true;\n            btnNext.disabled = true;\n        } else {\n            btnPrev.disabled = false;\n            btnNext.disabled = false;\n        }\n    });\n    // On metadata\n    socket.on(\"metadata\", function(msg) {\n        if (!msg) return false;\n        // Source detection\n        var playMedium = msg.PlayMedium ? msg.PlayMedium : \"\";\n        var trackSource = msg.TrackSource ? msg.TrackSource : \"\";\n        var sourceIdent = WNP.getSourceIdent(playMedium, trackSource);\n        // Did the source ident change...?\n        if (sourceIdent !== WNP.d.prevSourceIdent) {\n            if (sourceIdent !== \"\") {\n                var identImg = document.createElement(\"img\");\n                identImg.src = sourceIdent;\n                identImg.alt = playMedium + \": \" + trackSource;\n                identImg.title = playMedium + \": \" + trackSource;\n                mediaSource.innerHTML = identImg.outerHTML;\n            } else mediaSource.innerText = playMedium + \": \" + trackSource;\n            WNP.d.prevSourceIdent = sourceIdent; // Remember the last Source Ident\n        }\n        // Song Title, Subtitle, Artist, Album\n        mediaTitle.innerText = msg.trackMetaData && msg.trackMetaData[\"dc:title\"] ? msg.trackMetaData[\"dc:title\"] : \"\";\n        mediaSubTitle.innerText = msg.trackMetaData && msg.trackMetaData[\"dc:subtitle\"] ? msg.trackMetaData[\"dc:subtitle\"] : \"\";\n        mediaArtist.innerText = msg.trackMetaData && msg.trackMetaData[\"upnp:artist\"] ? msg.trackMetaData[\"upnp:artist\"] : \"\";\n        mediaAlbum.innerText = msg.trackMetaData && msg.trackMetaData[\"upnp:album\"] ? msg.trackMetaData[\"upnp:album\"] : \"\";\n        // mediaAlbum.innerHTML = (msg.trackMetaData && msg.trackMetaData[\"upnp:album\"]) ? \"<span id=\\\"mediaAlbumIdent\\\" class=\\\"badge badge-outlined\\\"><i class=\\\"bi bi-vinyl\\\"><\\/i><\\/span>\" + msg.trackMetaData[\"upnp:album\"] : \"\";\n        if (playMedium === \"SONGLIST-NETWORK\" && !trackSource && msg.CurrentTransportState === \"STOPPED\") mediaTitle.innerText = \"No Music Selected\";\n        // Audio quality\n        var songBitrate = msg.trackMetaData && msg.trackMetaData[\"song:bitrate\"] ? msg.trackMetaData[\"song:bitrate\"] : \"\";\n        var songBitDepth = msg.trackMetaData && msg.trackMetaData[\"song:format_s\"] ? msg.trackMetaData[\"song:format_s\"] : \"\";\n        var songSampleRate = msg.trackMetaData && msg.trackMetaData[\"song:rate_hz\"] ? msg.trackMetaData[\"song:rate_hz\"] : \"\";\n        mediaBitRate.innerText = songBitrate > 0 ? songBitrate > 1000 ? (songBitrate / 1000).toFixed(2) + \" mbps, \" : songBitrate + \" kbps, \" : \"\";\n        mediaBitDepth.innerText = songBitDepth > 0 ? songBitDepth > 24 ? \"24 bit/\" : songBitDepth + \" bit/\" : \"\"; // TODO: 32 bits is suspect according to the WiiM app?\n        mediaSampleRate.innerText = songSampleRate > 0 ? (songSampleRate / 1000).toFixed(1) + \" kHz\" : \"\";\n        if (!songBitrate && !songBitDepth && !songSampleRate) mediaQualityIdent.style.display = \"none\";\n        else mediaQualityIdent.style.display = \"inline-block\";\n        // Audio quality ident badge (HD/Hi-res/CD/...)\n        var songQuality = msg.trackMetaData && msg.trackMetaData[\"song:quality\"] ? msg.trackMetaData[\"song:quality\"] : \"\";\n        var songActualQuality = msg.trackMetaData && msg.trackMetaData[\"song:actualQuality\"] ? msg.trackMetaData[\"song:actualQuality\"] : \"\";\n        var qualiIdent = WNP.getQualityIdent(songQuality, songActualQuality, songBitrate, songBitDepth, songSampleRate);\n        if (qualiIdent !== \"\") {\n            mediaQualityIdent.innerText = qualiIdent;\n            mediaQualityIdent.title = \"Quality: \" + songQuality + \", \" + songActualQuality;\n        } else {\n            var identId = document.createElement(\"i\");\n            identId.className = \"bi bi-soundwave text-secondary\";\n            identId.title = \"Quality: \" + songQuality + \", \" + songActualQuality;\n            mediaQualityIdent.innerHTML = identId.outerHTML;\n        }\n        // Pre-process Album Art uri\n        var albumArtUri = msg && msg.trackMetaData && msg.trackMetaData[\"upnp:albumArtURI\"] ? msg.trackMetaData[\"upnp:albumArtURI\"] : WNP.s.rndAlbumArtUri;\n        // Case: The WiiM device is not doing anything and sends an 'un_known' album art uri.\n        if (albumArtUri === \"un_known\") albumArtUri = WNP.s.rndAlbumArtUri;\n        // Case: Plex Media Server sends album art as https:// and the certificate isn't valid, so we use a 'local' http:// image instead.\n        // Note that this is a bit of a hack, but it works for now. Plex Media Server has options to add a certificate, but it's a bit of a hassle.\n        if (albumArtUri.startsWith(\"https://\") && trackSource && trackSource.toLowerCase() === \"plex\") albumArtUri = albumArtUri.replace(\"https://\", \"http://\");\n        // Set Album Art, only if it changed\n        if (albumArt.src != albumArtUri) WNP.setAlbumArt(albumArtUri);\n        // Device volume\n        devVol.innerText = msg.CurrentVolume ? msg.CurrentVolume : \"-\";\n        // Loop mode status\n        if (msg.LoopMode) switch(msg.LoopMode){\n            case \"5\":\n                btnRepeat.className = \"btn btn-outline-success\";\n                btnRepeat.children[0].className = \"bi bi-repeat-1\";\n                btnShuffle.className = \"btn btn-outline-success\";\n                break;\n            case \"3\":\n                btnRepeat.className = \"btn btn-outline-light\";\n                btnRepeat.children[0].className = \"bi bi-repeat\";\n                btnShuffle.className = \"btn btn-outline-success\";\n                break;\n            case \"2\":\n                btnRepeat.className = \"btn btn-outline-success\";\n                btnRepeat.children[0].className = \"bi bi-repeat\";\n                btnShuffle.className = \"btn btn-outline-success\";\n                break;\n            case \"1\":\n                btnRepeat.className = \"btn btn-outline-success\";\n                btnRepeat.children[0].className = \"bi bi-repeat-1\";\n                btnShuffle.className = \"btn btn-outline-light\";\n                break;\n            case \"0\":\n                btnRepeat.className = \"btn btn-outline-success\";\n                btnRepeat.children[0].className = \"bi bi-repeat\";\n                btnShuffle.className = \"btn btn-outline-light\";\n                break;\n            default:\n                btnRepeat.className = \"btn btn-outline-light\";\n                btnRepeat.children[0].className = \"bi bi-repeat\";\n                btnShuffle.className = \"btn btn-outline-light\";\n        }\n        else {\n            btnRepeat.className = \"btn btn-outline-light\";\n            btnRepeat.children[0].className = \"bi bi-repeat\";\n            btnShuffle.className = \"btn btn-outline-light\";\n        }\n    });\n    // On device set\n    socket.on(\"device-set\", function(msg) {\n        // Device switch? Fetch settings and device info again.\n        socket.emit(\"server-settings\");\n        socket.emit(\"devices-get\");\n    });\n    // On device refresh\n    socket.on(\"devices-refresh\", function(msg) {\n        deviceChoices.innerHTML = \"<option disabled=\\\"disabled\\\">Waiting for devices...</em></li>\";\n    });\n};\n// =======================================================\n// Helper functions\n/**\r\n * Get player progress helper.\r\n * @param {string} relTime - Time elapsed while playing, format 00:00:00\r\n * @param {string} trackDuration - Total play time, format 00:00:00\r\n * @param {integer} timeStampDiff - Possible play time offset in seconds\r\n * @param {string} currentTransportState - The current transport state \"PLAYING\" or otherwise\r\n * @returns {object} An object with corrected played, left, total and percentage played\r\n */ WNP.getPlayerProgress = function(relTime, trackDuration, timeStampDiff, currentTransportState) {\n    var relTimeSec = this.convertToSeconds(relTime) + timeStampDiff;\n    var trackDurationSec = this.convertToSeconds(trackDuration);\n    if (trackDurationSec > 0 && relTimeSec < trackDurationSec) {\n        // var percentPlayed = Math.floor((relTimeSec / trackDurationSec) * 100);\n        var percentPlayed = (relTimeSec / trackDurationSec * 100).toFixed(1);\n        return {\n            played: WNP.convertToMinutes(relTimeSec),\n            left: WNP.convertToMinutes(trackDurationSec - relTimeSec),\n            total: WNP.convertToMinutes(trackDurationSec),\n            percent: percentPlayed\n        };\n    } else if (trackDurationSec == 0 && currentTransportState == \"PLAYING\") return {\n        played: \"Live\",\n        left: \"\",\n        total: \"\",\n        percent: 100\n    };\n    else return {\n        played: \"Paused\",\n        left: \"\",\n        total: \"\",\n        percent: 0\n    };\n};\n/**\r\n * Convert time format '00:00:00' to total number of seconds.\r\n * @param {string} sDuration - Time, format 00:00:00.\r\n * @returns {integer} The number of seconds that the string represents.\r\n */ WNP.convertToSeconds = function(sDuration) {\n    const timeSections = sDuration.split(\":\");\n    let totalSeconds = 0;\n    for(let i = 0; i < timeSections.length; i++){\n        var nFactor = timeSections.length - 1 - i; // Count backwards\n        var nMultiplier = Math.pow(60, nFactor); // 60^n\n        totalSeconds += nMultiplier * parseInt(timeSections[i]); // Calculate the seconds\n    }\n    return totalSeconds;\n};\n/**\r\n * Convert number of seconds to '00:00' string format. \r\n * Sorry for those hour+ long songs...\r\n * @param {integer} seconds - Number of seconds total.\r\n * @returns {string} The string representation of seconds in minutes, format 00:00.\r\n */ WNP.convertToMinutes = function(seconds) {\n    var tempDate = new Date(0);\n    tempDate.setSeconds(seconds);\n    var result = tempDate.toISOString().substring(14, 19);\n    return result;\n};\n/**\r\n * Sets the album art. Both on the foreground and background.\r\n * @param {integer} imgUri - The URI of the album art.\r\n * @returns {undefined}\r\n */ WNP.setAlbumArt = function(imgUri) {\n    console.log(\"WNP Set Album Art\", imgUri);\n    albumArt.src = imgUri;\n    bgAlbumArtBlur.style.backgroundImage = \"url('\" + imgUri + \"')\";\n};\n/**\r\n * Come up with a random album art URI (locally from the img folder).\r\n * @param {string} prefix - The prefix for the album art URI, i.e. 'fake-album-'\r\n * @returns {string} An URI for album art\r\n */ WNP.rndAlbumArt = function(prefix) {\n    return \"./img/\" + prefix + this.rndNumber(1, 16) + \".jpg\";\n};\n/**\r\n * Get a random number between min and max, including min and max.\r\n * @param {integer} min - Minimum number to pick, keep it lower than max.\r\n * @param {integer} max - Maximum number to pick.\r\n * @returns {integer} The random number\r\n */ WNP.rndNumber = function(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n/**\r\n * Get an identifier for the current play medium combined with the tracksource.\r\n * TODO: Verify all/most sources...\r\n * @param {string} playMedium - The PlayMedium as indicated by the device. Values: SONGLIST-NETWORK, RADIO-NETWORK, STATION-NETWORK, CAST, AIRPLAY, SPOTIFY, UNKOWN\r\n * @param {string} trackSource - The stream source as indicated by the device. Values: Prime, Qobuz, SPOTIFY, newTuneIn, iHeartRadio, Deezer, UPnPServer, Tidal, vTuner\r\n * @returns {string} The uri to the source identifier (image url)\r\n */ WNP.getSourceIdent = function(playMedium, trackSource) {\n    var sIdentUri = \"\";\n    switch(playMedium.toLowerCase()){\n        case \"airplay\":\n            sIdentUri = \"./img/sources/airplay2.png\";\n            break;\n        case \"third-dlna\":\n            sIdentUri = \"./img/sources/dlna2.png\";\n            break;\n        case \"cast\":\n            sIdentUri = \"./img/sources/chromecast2.png\";\n            break;\n        case \"radio-network\":\n            sIdentUri = \"./img/sources/radio.png\";\n            break;\n        case \"songlist-network\":\n            sIdentUri = \"./img/sources/ethernet2.png\";\n            break;\n        case \"spotify\":\n            sIdentUri = \"./img/sources/spotify.png\";\n            break;\n        case \"squeezelite\":\n            sIdentUri = \"./img/sources/music-assistant2.png\";\n            break;\n        case \"none\":\n            sIdentUri = \"./img/sources/none2.png\";\n            break;\n        case \"bluetooth\":\n            sIdentUri = \"./img/sources/bluetooth2.png\";\n            break;\n        case \"hdmi\":\n            sIdentUri = \"./img/sources/hdmi2.png\";\n            break;\n        case \"line-in\":\n            sIdentUri = \"./img/sources/line-in2.png\";\n            break;\n        case \"optical\":\n            sIdentUri = \"./img/sources/spdif2.png\";\n            break;\n    }\n    switch(trackSource.toLowerCase()){\n        case \"deezer\":\n        case \"deezer2\":\n            sIdentUri = \"./img/sources/deezer.png\";\n            break;\n        case \"iheartradio\":\n            sIdentUri = \"./img/sources/iheart.png\";\n            break;\n        case \"newtunein\":\n            sIdentUri = \"./img/sources/newtunein.png\";\n            break;\n        case \"plex\":\n            sIdentUri = \"./img/sources/plex.png\";\n            break;\n        case \"prime\":\n            sIdentUri = \"./img/sources/amazon-music2.png\";\n            break;\n        case \"qobuz\":\n            sIdentUri = \"./img/sources/qobuz2.png\";\n            break;\n        case \"tidal\":\n            sIdentUri = \"./img/sources/tidal2.png\";\n            break;\n        case \"upnpserver\":\n            sIdentUri = \"./img/sources/dlna2.png\";\n            break;\n        case \"vtuner\":\n            sIdentUri = \"./img/sources/vtuner2.png\";\n            break;\n    }\n    return sIdentUri;\n};\n/**\r\n * Get an identifier for the current audio/song quality.\r\n * TODO: Verify all/most sources...\r\n * Found so far:\r\n * \r\n * CD Quality: 44.1 KHz/16 bit. Bitrate 1,411 kbps. For mp3 bitrate can vary, but also be 320/192/160/128/... kbps.\r\n * Hi-Res quality: 96 kHz/24 bit and up. Bitrate 9,216 kbps.\r\n * \r\n * Spotify and Pandora usual bitrate 160 kbps, premium is 320 kbps\r\n * Tidal has CD quality, and FLAC, MQA, Master, ...\r\n * Qobuz apparently really has hi-res?\r\n * Amazon Music (Unlimited) does Atmos?\r\n * Apple Music -> Airplay 2, does hi-res?\r\n * YouTube Music -> Cast, does what?\r\n * \r\n * TIDAL -\r\n * Sample High: \"song:quality\":\"2\",\"song:actualQuality\":\"LOSSLESS\"\r\n * Sample MQA: \"song:quality\":\"3\",\"song:actualQuality\":\"HI_RES\"\r\n * Sample FLAC: \"song:quality\":\"4\",\"song:actualQuality\":\"HI_RES_LOSSLESS\"\r\n * \r\n * @param {integer} songQuality - A number identifying the quality, as indicated by the streaming service(?).\r\n * @param {string} songActualQuality - An indicator for the actual quality, as indicated by the streaming service(?).\r\n * @param {integer} songBitrate - The current bitrate in kilobit per second.\r\n * @param {integer} songBitDepth - The current sample depth in bits.\r\n * @param {integer} songSampleRate - The current sample rate in Hz.\r\n * @returns {string} The identifier for the audio quality, just a string.\r\n */ WNP.getQualityIdent = function(songQuality, songActualQuality, songBitrate, songBitDepth, songSampleRate) {\n    // console.log(songQuality, songActualQuality, songBitrate, songBitDepth, songSampleRate);\n    var sIdent = \"\";\n    if (songBitrate > 1000 && songBitDepth === 16 && songSampleRate === 44100) sIdent = \"CD\";\n    else if (songBitrate > 7000 && songBitDepth >= 24 && songSampleRate >= 96000) sIdent = \"Hi-Res\";\n    // Based of Tidal/Amazon Music Unlimited/Deezer/Qobuz\n    switch(songQuality + \":\" + songActualQuality){\n        case \"2:LOSSLESS\":\n        case \":LOSSLESS\":\n            sIdent = \"HIGH\";\n            break;\n        case \"3:HI_RES\":\n            sIdent = \"MQA\";\n            break;\n        case \"4:HI_RES_LOSSLESS\":\n        case \":HI_RES_LOSSLESS\":\n        case \"0:LOSSLESS\":\n            sIdent = \"FLAC\";\n            break;\n        case \":UHD\":\n            sIdent = \"ULTRA HD\";\n            break;\n        case \":HD\":\n            sIdent = \"HD\"; // Amazon Music\n            break;\n        case \"3:7\":\n        case \"4:27\":\n            sIdent = \"Hi-Res\"; // Qobuz\n            break;\n        case \"2:6\":\n            sIdent = \"CD\"; // Qobuz\n            break;\n    }\n    return sIdent;\n};\n// =======================================================\n// Start WiiM Now Playing app\nWNP.Init();\n\n\n//# sourceMappingURL=index.f50f160d.js.map\n","// =======================================================\r\n// WiiM Now Playing\r\n\r\n// Namespacing\r\nwindow.WNP = window.WNP || {};\r\n\r\n// Default settings\r\nWNP.s = {\r\n    rndAlbumArtUri: \"./img/fake-album-1.jpg\",\r\n};\r\n\r\n// Data placeholders.\r\nWNP.d = {\r\n    serverSettings: null,\r\n    deviceList: null,\r\n    prevTransportState: null,\r\n    prevPlayMedium: null,\r\n    prevSourceIdent: null\r\n}\r\n\r\n/**\r\n * Initialisation of app.\r\n * @returns {undefined}\r\n */\r\nWNP.Init = function () {\r\n    console.log(\"WNP\", \"Initialising...\");\r\n\r\n    // Init Socket.IO, connect to port where server resides\r\n    // Normally on port 80, but in cases where another port is chosen adapt\r\n    if (location.port != \"80\" && location.port != \"1234\") {\r\n        console.log(\"WNP\", \"Listening on \" + location.href)\r\n        window.socket = io.connect(\":\" + location.port);\r\n    }\r\n    else {\r\n        console.log(\"WNP\", \"Listening on \" + location.hostname + \":80\")\r\n        window.socket = io.connect(\":80\");\r\n    }\r\n\r\n    // Set Socket.IO definitions\r\n    this.setSocketDefinitions();\r\n\r\n    // Set UI event listeners\r\n    this.setUIListeners();\r\n\r\n    // Initial calls, wait a bit for socket to start\r\n    setTimeout(() => {\r\n        socket.emit(\"server-settings\");\r\n        socket.emit(\"devices-get\");\r\n    }, 500);\r\n\r\n    // Create random album intervals, every 3 minutes\r\n    WNP.s.rndAlbumArtUri = WNP.rndAlbumArt(\"fake-album-\");\r\n    var rndAlbumInterval = setInterval(function () {\r\n        WNP.s.rndAlbumArtUri = WNP.rndAlbumArt(\"fake-album-\");\r\n    }, 3 * 60 * 1000);\r\n\r\n};\r\n\r\n/**\r\n * Setting the listeners on the UI elements of the app.\r\n * @returns {undefined}\r\n */\r\nWNP.setUIListeners = function () {\r\n    console.log(\"WNP\", \"Set UI Listeners...\")\r\n\r\n    // ------------------------------------------------\r\n    // Player buttons\r\n\r\n    btnPrev.addEventListener(\"click\", function () {\r\n        var wnpAction = this.getAttribute(\"wnp-action\");\r\n        if (wnpAction) {\r\n            this.disabled = true;\r\n            socket.emit(\"device-action\", wnpAction);\r\n        }\r\n    });\r\n\r\n    btnPlay.addEventListener(\"click\", function () {\r\n        var wnpAction = this.getAttribute(\"wnp-action\");\r\n        if (wnpAction) {\r\n            this.disabled = true;\r\n            socket.emit(\"device-action\", wnpAction);\r\n        }\r\n    });\r\n\r\n    btnNext.addEventListener(\"click\", function () {\r\n        var wnpAction = this.getAttribute(\"wnp-action\");\r\n        if (wnpAction) {\r\n            this.disabled = true;\r\n            socket.emit(\"device-action\", wnpAction);\r\n        }\r\n    });\r\n\r\n    // ------------------------------------------------\r\n    // Settings buttons\r\n\r\n    btnRefresh.addEventListener(\"click\", function () {\r\n        socket.emit(\"devices-refresh\");\r\n        // Wait for discovery to finish\r\n        setTimeout(() => {\r\n            socket.emit(\"devices-get\");\r\n            socket.emit(\"server-settings\");\r\n        }, 5000);\r\n    });\r\n\r\n    deviceChoices.addEventListener(\"change\", function () {\r\n        socket.emit(\"device-set\", this.value);\r\n    })\r\n\r\n    btnReboot.addEventListener(\"click\", function () {\r\n        socket.emit(\"server-reboot\");\r\n    });\r\n\r\n    btnUpdate.addEventListener(\"click\", function () {\r\n        socket.emit(\"server-update\");\r\n    });\r\n\r\n    btnShutdown.addEventListener(\"click\", function () {\r\n        socket.emit(\"server-shutdown\");\r\n    });\r\n\r\n    btnReloadUI.addEventListener(\"click\", function () {\r\n        location.reload();\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Set the socket definitions to listen for specific websocket traffic and handle accordingly.\r\n * @returns {undefined}\r\n */\r\nWNP.setSocketDefinitions = function () {\r\n    console.log(\"WNP\", \"Setting Socket definitions...\")\r\n\r\n    // On server settings\r\n    socket.on(\"server-settings\", function (msg) {\r\n\r\n        // Store server settings\r\n        WNP.d.serverSettings = msg\r\n\r\n        // RPi has bash, so possibly able to reboot/shutdown.\r\n        if (msg.os.userInfo.shell === \"/bin/bash\") {\r\n            btnReboot.disabled = false;\r\n            btnUpdate.disabled = false;\r\n            btnShutdown.disabled = false;\r\n        };\r\n\r\n        // Set device name\r\n        if (msg.selectedDevice && msg.selectedDevice.friendlyName) {\r\n            devName.innerText = msg.selectedDevice.friendlyName;\r\n        };\r\n\r\n        // Set the server url(s) under the settings modal\r\n        if (msg && msg.os && msg.os.hostname) {\r\n            var sUrl = \"http://\" + msg.os.hostname.toLowerCase() + \".local\";\r\n            sUrl += (location && location.port && location.port != 80) ? \":\" + location.port + \"/\" : \"/\";\r\n            sServerUrlHostname.children[0].innerHTML = \"<a href=\\\"\" + sUrl + \"\\\">\" + sUrl + \"</a>\";\r\n        }\r\n        else {\r\n            sServerUrlHostname.children[0].innerText = \"-\";\r\n        }\r\n        if (msg && msg.selectedDevice && msg.selectedDevice.location && msg.os && msg.os.networkInterfaces) {\r\n            // Grab the ip address pattern of the selected device\r\n            // Assumption is that the wiim-now-playing server is on the same ip range as the client..\r\n            var sLocationIp = msg.selectedDevice.location.split(\"/\")[2]; // Extract ip address from location\r\n            var aIpAddress = sLocationIp.split(\".\"); // Split ip address in parts\r\n            aIpAddress.pop(); // Remove the last part\r\n            var sIpPattern = aIpAddress.join(\".\"); // Construct ip address pattern\r\n            // Search for server ip address(es) in this range...\r\n            Object.keys(msg.os.networkInterfaces).forEach(function (key, index) {\r\n                var sIpFound = msg.os.networkInterfaces[key].find(addr => addr.address.startsWith(sIpPattern))\r\n                if (sIpFound) {\r\n                    // Construct ip address and optional port\r\n                    var sUrl = \"http://\" + sIpFound.address;\r\n                    sUrl += (location && location.port && location.port != 80) ? \":\" + location.port + \"/\" : \"/\";\r\n                    sServerUrlIP.children[0].innerHTML = \"<a href=\\\"\" + sUrl + \"\\\">\" + sUrl + \"</a>\";\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            sServerUrlIP.children[0].innerText = \"-\";\r\n        }\r\n\r\n    });\r\n\r\n    // On devices get\r\n    socket.on(\"devices-get\", function (msg) {\r\n\r\n        // Store and sort device list\r\n        WNP.d.deviceList = msg;\r\n        WNP.d.deviceList.sort((a, b) => { return (a.friendlyName < b.friendlyName) ? -1 : 1 });\r\n\r\n        // Clear choices\r\n        deviceChoices.innerHTML = \"<option value=\\\"\\\">Select a device...</em></li>\";\r\n\r\n        // Add WiiM devices\r\n        var devicesWiiM = WNP.d.deviceList.filter((d) => { return d.manufacturer.startsWith(\"Linkplay\") });\r\n        if (devicesWiiM.length > 0) {\r\n            var optGroup = document.createElement(\"optgroup\");\r\n            optGroup.label = \"WiiM devices\";\r\n            devicesWiiM.forEach((device) => {\r\n                var opt = document.createElement(\"option\");\r\n                opt.value = device.location;\r\n                opt.innerText = device.friendlyName;\r\n                opt.title = \"By \" + device.manufacturer;\r\n                if (WNP.d.serverSettings && WNP.d.serverSettings.selectedDevice && WNP.d.serverSettings.selectedDevice.location === device.location) {\r\n                    opt.setAttribute(\"selected\", \"selected\");\r\n                };\r\n                optGroup.appendChild(opt);\r\n            })\r\n            deviceChoices.appendChild(optGroup);\r\n        };\r\n\r\n        // Other devices\r\n        var devicesOther = WNP.d.deviceList.filter((d) => { return !d.manufacturer.startsWith(\"Linkplay\") });\r\n        if (devicesOther.length > 0) {\r\n            var optGroup = document.createElement(\"optgroup\");\r\n            optGroup.label = \"Other devices\";\r\n            devicesOther.forEach((device) => {\r\n                var opt = document.createElement(\"option\");\r\n                opt.value = device.location;\r\n                opt.innerText = device.friendlyName;\r\n                opt.title = \"By \" + device.manufacturer;\r\n                if (WNP.d.serverSettings && WNP.d.serverSettings.selectedDevice && WNP.d.serverSettings.selectedDevice.location === device.location) {\r\n                    opt.setAttribute(\"selected\", \"selected\");\r\n                };\r\n                optGroup.appendChild(opt);\r\n            })\r\n            deviceChoices.appendChild(optGroup);\r\n\r\n        };\r\n\r\n        if (devicesWiiM.length == 0 && devicesOther.length == 0) {\r\n            deviceChoices.innerHTML = \"<option disabled=\\\"disabled\\\">No devices found!</em></li>\";\r\n        };\r\n\r\n    });\r\n\r\n    // On state\r\n    socket.on(\"state\", function (msg) {\r\n        if (!msg) { return false; }\r\n        // console.log(msg);\r\n\r\n        // Get player progress data from the state message.\r\n        var timeStampDiff = 0;\r\n        if (msg.CurrentTransportState === \"PLAYING\") {\r\n            timeStampDiff = (msg.stateTimeStamp && msg.metadataTimeStamp) ? Math.round((msg.stateTimeStamp - msg.metadataTimeStamp) / 1000) : 0;\r\n        }\r\n        var relTime = (msg.RelTime) ? msg.RelTime : \"00:00:00\";\r\n        var trackDuration = (msg.TrackDuration) ? msg.TrackDuration : \"00:00:00\";\r\n\r\n        // Get current player progress and set UI elements accordingly.\r\n        var playerProgress = WNP.getPlayerProgress(relTime, trackDuration, timeStampDiff, msg.CurrentTransportState);\r\n        progressPlayed.children[0].innerText = playerProgress.played;\r\n        progressLeft.children[0].innerText = (playerProgress.left != \"\") ? \"-\" + playerProgress.left : \"\";\r\n        progressPercent.setAttribute(\"aria-valuenow\", playerProgress.percent)\r\n        progressPercent.children[0].setAttribute(\"style\", \"width:\" + playerProgress.percent + \"%\");\r\n\r\n        // Device transport state or play medium changed...?\r\n        if (WNP.d.prevTransportState !== msg.CurrentTransportState || WNP.d.prevPlayMedium !== msg.PlayMedium) {\r\n            if (msg.CurrentTransportState === \"TRANSITIONING\") {\r\n                btnPlay.children[0].className = \"bi bi-circle-fill\";\r\n                btnPlay.disabled = true;\r\n            };\r\n            if (msg.CurrentTransportState === \"PLAYING\") {\r\n                // Radio live streams are preferrentialy stopped as pausing keeps cache for minutes/hours(?).\r\n                // Stop > Play resets the stream to 'now'. Pause works like 'live tv time shift'.\r\n                if (msg.PlayMedium && msg.PlayMedium === \"RADIO-NETWORK\") {\r\n                    btnPlay.children[0].className = \"bi bi-stop-circle-fill\";\r\n                    btnPlay.setAttribute(\"wnp-action\", \"Stop\");\r\n                }\r\n                else {\r\n                    btnPlay.children[0].className = \"bi bi-pause-circle-fill\";\r\n                    btnPlay.setAttribute(\"wnp-action\", \"Pause\");\r\n                }\r\n                btnPlay.disabled = false;\r\n            }\r\n            else if (msg.CurrentTransportState === \"PAUSED_PLAYBACK\" || msg.CurrentTransportState === \"STOPPED\") {\r\n                btnPlay.children[0].className = \"bi bi-play-circle-fill\";\r\n                btnPlay.setAttribute(\"wnp-action\", \"Play\");\r\n                btnPlay.disabled = false;\r\n            };\r\n            WNP.d.prevTransportState = msg.CurrentTransportState; // Remember the last transport state\r\n            WNP.d.prevPlayMedium = msg.PlayMedium; // Remember the last PlayMedium\r\n        }\r\n\r\n        // If internet radio, there is no skipping... just start and stop!\r\n        if (msg.PlayMedium && msg.PlayMedium === \"RADIO-NETWORK\") {\r\n            btnPrev.disabled = true;\r\n            btnNext.disabled = true;\r\n        }\r\n        else {\r\n            btnPrev.disabled = false;\r\n            btnNext.disabled = false;\r\n        }\r\n\r\n    });\r\n\r\n    // On metadata\r\n    socket.on(\"metadata\", function (msg) {\r\n        if (!msg) { return false; }\r\n\r\n        // Source detection\r\n        var playMedium = (msg.PlayMedium) ? msg.PlayMedium : \"\";\r\n        var trackSource = (msg.TrackSource) ? msg.TrackSource : \"\";\r\n        var sourceIdent = WNP.getSourceIdent(playMedium, trackSource);\r\n        // Did the source ident change...?\r\n        if (sourceIdent !== WNP.d.prevSourceIdent) {\r\n            if (sourceIdent !== \"\") {\r\n                var identImg = document.createElement(\"img\");\r\n                identImg.src = sourceIdent;\r\n                identImg.alt = playMedium + \": \" + trackSource;\r\n                identImg.title = playMedium + \": \" + trackSource;\r\n                mediaSource.innerHTML = identImg.outerHTML;\r\n            }\r\n            else {\r\n                mediaSource.innerText = playMedium + \": \" + trackSource;\r\n            }\r\n            WNP.d.prevSourceIdent = sourceIdent; // Remember the last Source Ident\r\n        }\r\n\r\n        // Song Title, Subtitle, Artist, Album\r\n        mediaTitle.innerText = (msg.trackMetaData && msg.trackMetaData[\"dc:title\"]) ? msg.trackMetaData[\"dc:title\"] : \"\";\r\n        mediaSubTitle.innerText = (msg.trackMetaData && msg.trackMetaData[\"dc:subtitle\"]) ? msg.trackMetaData[\"dc:subtitle\"] : \"\";\r\n        mediaArtist.innerText = (msg.trackMetaData && msg.trackMetaData[\"upnp:artist\"]) ? msg.trackMetaData[\"upnp:artist\"] : \"\";\r\n        mediaAlbum.innerText = (msg.trackMetaData && msg.trackMetaData[\"upnp:album\"]) ? msg.trackMetaData[\"upnp:album\"] : \"\";\r\n        // mediaAlbum.innerHTML = (msg.trackMetaData && msg.trackMetaData[\"upnp:album\"]) ? \"<span id=\\\"mediaAlbumIdent\\\" class=\\\"badge badge-outlined\\\"><i class=\\\"bi bi-vinyl\\\"><\\/i><\\/span>\" + msg.trackMetaData[\"upnp:album\"] : \"\";\r\n        if (playMedium === \"SONGLIST-NETWORK\" && !trackSource && msg.CurrentTransportState === \"STOPPED\") {\r\n            mediaTitle.innerText = \"No Music Selected\";\r\n        }\r\n\r\n        // Audio quality\r\n        var songBitrate = (msg.trackMetaData && msg.trackMetaData[\"song:bitrate\"]) ? msg.trackMetaData[\"song:bitrate\"] : \"\";\r\n        var songBitDepth = (msg.trackMetaData && msg.trackMetaData[\"song:format_s\"]) ? msg.trackMetaData[\"song:format_s\"] : \"\";\r\n        var songSampleRate = (msg.trackMetaData && msg.trackMetaData[\"song:rate_hz\"]) ? msg.trackMetaData[\"song:rate_hz\"] : \"\";\r\n        mediaBitRate.innerText = (songBitrate > 0) ? ((songBitrate > 1000) ? (songBitrate / 1000).toFixed(2) + \" mbps, \" : songBitrate + \" kbps, \") : \"\";\r\n        mediaBitDepth.innerText = (songBitDepth > 0) ? ((songBitDepth > 24) ? \"24 bit/\" : songBitDepth + \" bit/\") : \"\"; // TODO: 32 bits is suspect according to the WiiM app?\r\n        mediaSampleRate.innerText = (songSampleRate > 0) ? (songSampleRate / 1000).toFixed(1) + \" kHz\" : \"\";\r\n        if (!songBitrate && !songBitDepth && !songSampleRate) {\r\n            mediaQualityIdent.style.display = \"none\";\r\n        }\r\n        else {\r\n            mediaQualityIdent.style.display = \"inline-block\";\r\n        }\r\n\r\n        // Audio quality ident badge (HD/Hi-res/CD/...)\r\n        var songQuality = (msg.trackMetaData && msg.trackMetaData[\"song:quality\"]) ? msg.trackMetaData[\"song:quality\"] : \"\";\r\n        var songActualQuality = (msg.trackMetaData && msg.trackMetaData[\"song:actualQuality\"]) ? msg.trackMetaData[\"song:actualQuality\"] : \"\";\r\n        var qualiIdent = WNP.getQualityIdent(songQuality, songActualQuality, songBitrate, songBitDepth, songSampleRate);\r\n        if (qualiIdent !== \"\") {\r\n            mediaQualityIdent.innerText = qualiIdent;\r\n            mediaQualityIdent.title = \"Quality: \" + songQuality + \", \" + songActualQuality;\r\n        }\r\n        else {\r\n            var identId = document.createElement(\"i\");\r\n            identId.className = \"bi bi-soundwave text-secondary\";\r\n            identId.title = \"Quality: \" + songQuality + \", \" + songActualQuality;\r\n            mediaQualityIdent.innerHTML = identId.outerHTML;\r\n        }\r\n\r\n        // Pre-process Album Art uri\r\n        var albumArtUri = (msg && msg.trackMetaData && msg.trackMetaData[\"upnp:albumArtURI\"]) ? msg.trackMetaData[\"upnp:albumArtURI\"] : WNP.s.rndAlbumArtUri;\r\n        // Case: The WiiM device is not doing anything and sends an 'un_known' album art uri.\r\n        if (albumArtUri === \"un_known\") {\r\n            albumArtUri = WNP.s.rndAlbumArtUri;\r\n        }\r\n        // Case: Plex Media Server sends album art as https:// and the certificate isn't valid, so we use a 'local' http:// image instead.\r\n        // Note that this is a bit of a hack, but it works for now. Plex Media Server has options to add a certificate, but it's a bit of a hassle.\r\n        if (albumArtUri.startsWith(\"https://\") && trackSource && trackSource.toLowerCase() === \"plex\") {\r\n            albumArtUri = albumArtUri.replace(\"https://\", \"http://\");\r\n        }\r\n\r\n        // Set Album Art, only if it changed\r\n        if (albumArt.src != albumArtUri) {\r\n            WNP.setAlbumArt(albumArtUri);\r\n        }\r\n\r\n        // Device volume\r\n        devVol.innerText = (msg.CurrentVolume) ? msg.CurrentVolume : \"-\";\r\n\r\n        // Loop mode status\r\n        if (msg.LoopMode) {\r\n            switch (msg.LoopMode) {\r\n                case \"5\": // repeat-1 | shuffle\r\n                    btnRepeat.className = \"btn btn-outline-success\";\r\n                    btnRepeat.children[0].className = \"bi bi-repeat-1\";\r\n                    btnShuffle.className = \"btn btn-outline-success\";\r\n                    break;\r\n                case \"3\": // no repeat | shuffle\r\n                    btnRepeat.className = \"btn btn-outline-light\";\r\n                    btnRepeat.children[0].className = \"bi bi-repeat\";\r\n                    btnShuffle.className = \"btn btn-outline-success\";\r\n                    break;\r\n                case \"2\": // repeat | shuffle\r\n                    btnRepeat.className = \"btn btn-outline-success\";\r\n                    btnRepeat.children[0].className = \"bi bi-repeat\";\r\n                    btnShuffle.className = \"btn btn-outline-success\";\r\n                    break;\r\n                case \"1\": // repeat-1 | no shuffle\r\n                    btnRepeat.className = \"btn btn-outline-success\";\r\n                    btnRepeat.children[0].className = \"bi bi-repeat-1\";\r\n                    btnShuffle.className = \"btn btn-outline-light\";\r\n                    // change repeat icon\r\n                    break;\r\n                case \"0\": // repeat | no shuffle\r\n                    btnRepeat.className = \"btn btn-outline-success\";\r\n                    btnRepeat.children[0].className = \"bi bi-repeat\";\r\n                    btnShuffle.className = \"btn btn-outline-light\";\r\n                    break;\r\n                default: // no repeat | no shuffle #4\r\n                    btnRepeat.className = \"btn btn-outline-light\";\r\n                    btnRepeat.children[0].className = \"bi bi-repeat\";\r\n                    btnShuffle.className = \"btn btn-outline-light\";\r\n            }\r\n        }\r\n        else { // Unknown, so set default\r\n            btnRepeat.className = \"btn btn-outline-light\";\r\n            btnRepeat.children[0].className = \"bi bi-repeat\";\r\n            btnShuffle.className = \"btn btn-outline-light\";\r\n        }\r\n\r\n    });\r\n\r\n    // On device set\r\n    socket.on(\"device-set\", function (msg) {\r\n        // Device switch? Fetch settings and device info again.\r\n        socket.emit(\"server-settings\");\r\n        socket.emit(\"devices-get\");\r\n    });\r\n\r\n    // On device refresh\r\n    socket.on(\"devices-refresh\", function (msg) {\r\n        deviceChoices.innerHTML = \"<option disabled=\\\"disabled\\\">Waiting for devices...</em></li>\";\r\n    });\r\n\r\n};\r\n\r\n// =======================================================\r\n// Helper functions\r\n\r\n/**\r\n * Get player progress helper.\r\n * @param {string} relTime - Time elapsed while playing, format 00:00:00\r\n * @param {string} trackDuration - Total play time, format 00:00:00\r\n * @param {integer} timeStampDiff - Possible play time offset in seconds\r\n * @param {string} currentTransportState - The current transport state \"PLAYING\" or otherwise\r\n * @returns {object} An object with corrected played, left, total and percentage played\r\n */\r\nWNP.getPlayerProgress = function (relTime, trackDuration, timeStampDiff, currentTransportState) {\r\n    var relTimeSec = this.convertToSeconds(relTime) + timeStampDiff;\r\n    var trackDurationSec = this.convertToSeconds(trackDuration);\r\n    if (trackDurationSec > 0 && relTimeSec < trackDurationSec) {\r\n        // var percentPlayed = Math.floor((relTimeSec / trackDurationSec) * 100);\r\n        var percentPlayed = ((relTimeSec / trackDurationSec) * 100).toFixed(1);\r\n        return {\r\n            played: WNP.convertToMinutes(relTimeSec),\r\n            left: WNP.convertToMinutes(trackDurationSec - relTimeSec),\r\n            total: WNP.convertToMinutes(trackDurationSec),\r\n            percent: percentPlayed\r\n        };\r\n    }\r\n    else if (trackDurationSec == 0 && currentTransportState == \"PLAYING\") {\r\n        return {\r\n            played: \"Live\",\r\n            left: \"\",\r\n            total: \"\",\r\n            percent: 100\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            played: \"Paused\",\r\n            left: \"\",\r\n            total: \"\",\r\n            percent: 0\r\n        };\r\n    };\r\n};\r\n\r\n/**\r\n * Convert time format '00:00:00' to total number of seconds.\r\n * @param {string} sDuration - Time, format 00:00:00.\r\n * @returns {integer} The number of seconds that the string represents.\r\n */\r\nWNP.convertToSeconds = function (sDuration) {\r\n    const timeSections = sDuration.split(\":\");\r\n    let totalSeconds = 0;\r\n    for (let i = 0; i < timeSections.length; i++) {\r\n        var nFactor = timeSections.length - 1 - i; // Count backwards\r\n        var nMultiplier = Math.pow(60, nFactor); // 60^n\r\n        totalSeconds += nMultiplier * parseInt(timeSections[i]); // Calculate the seconds\r\n    }\r\n    return totalSeconds\r\n}\r\n\r\n/**\r\n * Convert number of seconds to '00:00' string format. \r\n * Sorry for those hour+ long songs...\r\n * @param {integer} seconds - Number of seconds total.\r\n * @returns {string} The string representation of seconds in minutes, format 00:00.\r\n */\r\nWNP.convertToMinutes = function (seconds) {\r\n    var tempDate = new Date(0);\r\n    tempDate.setSeconds(seconds);\r\n    var result = tempDate.toISOString().substring(14, 19);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Sets the album art. Both on the foreground and background.\r\n * @param {integer} imgUri - The URI of the album art.\r\n * @returns {undefined}\r\n */\r\nWNP.setAlbumArt = function (imgUri) {\r\n    console.log(\"WNP Set Album Art\", imgUri);\r\n    albumArt.src = imgUri;\r\n    bgAlbumArtBlur.style.backgroundImage = \"url('\" + imgUri + \"')\";\r\n};\r\n\r\n/**\r\n * Come up with a random album art URI (locally from the img folder).\r\n * @param {string} prefix - The prefix for the album art URI, i.e. 'fake-album-'\r\n * @returns {string} An URI for album art\r\n */\r\nWNP.rndAlbumArt = function (prefix) {\r\n    return \"./img/\" + prefix + this.rndNumber(1, 16) + \".jpg\";\r\n};\r\n\r\n/**\r\n * Get a random number between min and max, including min and max.\r\n * @param {integer} min - Minimum number to pick, keep it lower than max.\r\n * @param {integer} max - Maximum number to pick.\r\n * @returns {integer} The random number\r\n */\r\nWNP.rndNumber = function (min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\n/**\r\n * Get an identifier for the current play medium combined with the tracksource.\r\n * TODO: Verify all/most sources...\r\n * @param {string} playMedium - The PlayMedium as indicated by the device. Values: SONGLIST-NETWORK, RADIO-NETWORK, STATION-NETWORK, CAST, AIRPLAY, SPOTIFY, UNKOWN\r\n * @param {string} trackSource - The stream source as indicated by the device. Values: Prime, Qobuz, SPOTIFY, newTuneIn, iHeartRadio, Deezer, UPnPServer, Tidal, vTuner\r\n * @returns {string} The uri to the source identifier (image url)\r\n */\r\nWNP.getSourceIdent = function (playMedium, trackSource) {\r\n\r\n    var sIdentUri = \"\";\r\n\r\n    switch (playMedium.toLowerCase()) {\r\n        case \"airplay\":\r\n            sIdentUri = \"./img/sources/airplay2.png\";\r\n            break;\r\n        case \"third-dlna\":\r\n            sIdentUri = \"./img/sources/dlna2.png\";\r\n            break;\r\n        case \"cast\":\r\n            sIdentUri = \"./img/sources/chromecast2.png\";\r\n            break;\r\n        case \"radio-network\":\r\n            sIdentUri = \"./img/sources/radio.png\";\r\n            break;\r\n        case \"songlist-network\":\r\n            sIdentUri = \"./img/sources/ethernet2.png\";\r\n            break;\r\n        case \"spotify\":\r\n            sIdentUri = \"./img/sources/spotify.png\";\r\n            break;\r\n        case \"squeezelite\":\r\n            sIdentUri = \"./img/sources/music-assistant2.png\";\r\n            break;\r\n        case \"none\":\r\n            sIdentUri = \"./img/sources/none2.png\";\r\n            break;\r\n        case \"bluetooth\":\r\n            sIdentUri = \"./img/sources/bluetooth2.png\";\r\n            break;\r\n        case \"hdmi\":\r\n            sIdentUri = \"./img/sources/hdmi2.png\";\r\n            break;\r\n        case \"line-in\":\r\n            sIdentUri = \"./img/sources/line-in2.png\";\r\n            break;\r\n        case \"optical\":\r\n            sIdentUri = \"./img/sources/spdif2.png\";\r\n            break;\r\n    };\r\n\r\n    switch (trackSource.toLowerCase()) {\r\n        case \"deezer\":\r\n        case \"deezer2\":\r\n            sIdentUri = \"./img/sources/deezer.png\";\r\n            break;\r\n        case \"iheartradio\":\r\n            sIdentUri = \"./img/sources/iheart.png\";\r\n            break;\r\n        case \"newtunein\":\r\n            sIdentUri = \"./img/sources/newtunein.png\";\r\n            break;\r\n        case \"plex\":\r\n            sIdentUri = \"./img/sources/plex.png\";\r\n            break;\r\n        case \"prime\":\r\n            sIdentUri = \"./img/sources/amazon-music2.png\";\r\n            break;\r\n        case \"qobuz\":\r\n            sIdentUri = \"./img/sources/qobuz2.png\";\r\n            break;\r\n        case \"tidal\":\r\n            sIdentUri = \"./img/sources/tidal2.png\";\r\n            break;\r\n        case \"upnpserver\":\r\n            sIdentUri = \"./img/sources/dlna2.png\";\r\n            break;\r\n        case \"vtuner\":\r\n            sIdentUri = \"./img/sources/vtuner2.png\";\r\n            break;\r\n    };\r\n\r\n    return sIdentUri;\r\n\r\n};\r\n\r\n/**\r\n * Get an identifier for the current audio/song quality.\r\n * TODO: Verify all/most sources...\r\n * Found so far:\r\n * \r\n * CD Quality: 44.1 KHz/16 bit. Bitrate 1,411 kbps. For mp3 bitrate can vary, but also be 320/192/160/128/... kbps.\r\n * Hi-Res quality: 96 kHz/24 bit and up. Bitrate 9,216 kbps.\r\n * \r\n * Spotify and Pandora usual bitrate 160 kbps, premium is 320 kbps\r\n * Tidal has CD quality, and FLAC, MQA, Master, ...\r\n * Qobuz apparently really has hi-res?\r\n * Amazon Music (Unlimited) does Atmos?\r\n * Apple Music -> Airplay 2, does hi-res?\r\n * YouTube Music -> Cast, does what?\r\n * \r\n * TIDAL -\r\n * Sample High: \"song:quality\":\"2\",\"song:actualQuality\":\"LOSSLESS\"\r\n * Sample MQA: \"song:quality\":\"3\",\"song:actualQuality\":\"HI_RES\"\r\n * Sample FLAC: \"song:quality\":\"4\",\"song:actualQuality\":\"HI_RES_LOSSLESS\"\r\n * \r\n * @param {integer} songQuality - A number identifying the quality, as indicated by the streaming service(?).\r\n * @param {string} songActualQuality - An indicator for the actual quality, as indicated by the streaming service(?).\r\n * @param {integer} songBitrate - The current bitrate in kilobit per second.\r\n * @param {integer} songBitDepth - The current sample depth in bits.\r\n * @param {integer} songSampleRate - The current sample rate in Hz.\r\n * @returns {string} The identifier for the audio quality, just a string.\r\n */\r\nWNP.getQualityIdent = function (songQuality, songActualQuality, songBitrate, songBitDepth, songSampleRate) {\r\n    // console.log(songQuality, songActualQuality, songBitrate, songBitDepth, songSampleRate);\r\n\r\n    var sIdent = \"\";\r\n\r\n    if (songBitrate > 1000 && songBitDepth === 16 && songSampleRate === 44100) {\r\n        sIdent = \"CD\";\r\n    }\r\n    else if (songBitrate > 7000 && songBitDepth >= 24 && songSampleRate >= 96000) {\r\n        sIdent = \"Hi-Res\";\r\n    }\r\n\r\n    // Based of Tidal/Amazon Music Unlimited/Deezer/Qobuz\r\n    switch (songQuality + \":\" + songActualQuality) {\r\n        case \"2:LOSSLESS\": // Tidal\r\n        case \":LOSSLESS\": // Tidal\r\n            sIdent = \"HIGH\";\r\n            break;\r\n        case \"3:HI_RES\": // Tidal\r\n            sIdent = \"MQA\";\r\n            break;\r\n        case \"4:HI_RES_LOSSLESS\": // Tidal\r\n        case \":HI_RES_LOSSLESS\": // Tidal\r\n        case \"0:LOSSLESS\": // Deezer\r\n            sIdent = \"FLAC\";\r\n            break;\r\n        case \":UHD\": // Amazon Music\r\n            sIdent = \"ULTRA HD\";\r\n            break;\r\n        case \":HD\":\r\n            sIdent = \"HD\"; // Amazon Music\r\n            break;\r\n        case \"3:7\":\r\n        case \"4:27\":\r\n            sIdent = \"Hi-Res\"; // Qobuz\r\n            break;\r\n        case \"2:6\":\r\n            sIdent = \"CD\"; // Qobuz\r\n            break;\r\n    };\r\n\r\n    return sIdent;\r\n\r\n};\r\n\r\n// =======================================================\r\n// Start WiiM Now Playing app\r\nWNP.Init();\r\n"],"names":["window","WNP","s","rndAlbumArtUri","d","serverSettings","deviceList","prevTransportState","prevPlayMedium","prevSourceIdent","Init","console","log","location","port","href","socket","io","connect","hostname","setSocketDefinitions","setUIListeners","setTimeout","emit","rndAlbumArt","setInterval","btnPrev","addEventListener","wnpAction","getAttribute","disabled","btnPlay","btnNext","btnRefresh","deviceChoices","value","btnReboot","btnUpdate","btnShutdown","btnReloadUI","reload","on","msg","os","userInfo","shell","selectedDevice","friendlyName","devName","innerText","sUrl","toLowerCase","sServerUrlHostname","children","innerHTML","networkInterfaces","aIpAddress","sLocationIp","split","pop","sIpPattern","join","Object","keys","forEach","key","index","sIpFound","find","addr","address","startsWith","sServerUrlIP","sort","a","b","devicesWiiM","filter","manufacturer","length","optGroup","document","createElement","label","device","opt","title","setAttribute","appendChild","devicesOther","timeStampDiff","CurrentTransportState","stateTimeStamp","metadataTimeStamp","Math","round","relTime","RelTime","trackDuration","TrackDuration","playerProgress","getPlayerProgress","progressPlayed","played","progressLeft","left","progressPercent","percent","PlayMedium","className","playMedium","trackSource","TrackSource","sourceIdent","getSourceIdent","identImg","src","alt","mediaSource","outerHTML","mediaTitle","trackMetaData","mediaSubTitle","mediaArtist","mediaAlbum","songBitrate","songBitDepth","songSampleRate","mediaBitRate","toFixed","mediaBitDepth","mediaSampleRate","mediaQualityIdent","style","display","songQuality","songActualQuality","qualiIdent","getQualityIdent","identId","albumArtUri","replace","albumArt","setAlbumArt","devVol","CurrentVolume","LoopMode","btnRepeat","btnShuffle","currentTransportState","relTimeSec","convertToSeconds","trackDurationSec","percentPlayed","convertToMinutes","total","sDuration","timeSections","totalSeconds","i","nMultiplier","pow","parseInt","seconds","tempDate","Date","setSeconds","toISOString","substring","imgUri","bgAlbumArtBlur","backgroundImage","prefix","rndNumber","min","max","floor","random","sIdentUri","sIdent"],"version":3,"file":"index.f50f160d.js.map"}