{"mappings":"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","sources":["<anon>","src/js/debug.js"],"sourcesContent":["var $4165fb5e9d27a5f7$exports = {};\n// =======================================================\n// WiiM Now Playing (Debug)\n// Debugging script for the WiiM Now Playing server\n// Namespacing\nwindow.WNP = window.WNP || {};\n// Default settings\nWNP.s = {\n    // Device selection\n    aDeviceUI: [\n        \"btnRefresh\",\n        \"selDeviceChoices\",\n        \"btnDevices\"\n    ],\n    // Server actions to be used in the app\n    aServerUI: [\n        \"btnReboot\",\n        \"btnUpdate\",\n        \"btnShutdown\",\n        \"btnReloadUI\"\n    ],\n    // Ticks to be used in the app (debug)\n    aTicksUI: [\n        \"tickDevicesGetUp\",\n        \"tickDevicesRefreshUp\",\n        \"tickServerSettingsUp\",\n        \"tickStateUp\",\n        \"tickStateDown\",\n        \"tickMetadataUp\",\n        \"tickMetadataDown\",\n        \"tickDeviceSetUp\",\n        \"tickDeviceSetDown\",\n        \"tickServerSettingsDown\",\n        \"tickDevicesGetDown\",\n        \"tickDevicesRefreshDown\"\n    ],\n    // Debug UI elements\n    aDebugUI: [\n        \"state\",\n        \"metadata\",\n        \"sServerSettings\",\n        \"sFriendlyname\",\n        \"sManufacturer\",\n        \"sModelName\",\n        \"sLocation\",\n        \"sServerUrlHostname\",\n        \"sServerUrlIP\",\n        \"sTimeStampDiff\",\n        \"sTitle\",\n        \"sArtist\",\n        \"sAlbum\",\n        \"sAlbumArtUri\",\n        \"sSubtitle\"\n    ]\n};\n// Data placeholders.\nWNP.d = {\n    serverSettings: null,\n    deviceList: null\n};\n// Reference placeholders.\n// These are set in the init function\n// and are used to reference the UI elements in the app.\nWNP.r = {};\n/**\r\n * Initialisation of app.\r\n * @returns {undefined}\r\n */ WNP.Init = function() {\n    console.log(\"WNP DEBUG\", \"Initialising...\");\n    // Init Socket.IO, connect to port where server resides\n    // Normally on port 80, but in cases where another port is chosen adapt\n    if (location.port != \"80\" && location.port != \"1234\") {\n        console.log(\"WNP DEBUG\", \"Listening on \" + location.href);\n        window.socket = io.connect(\":\" + location.port);\n    } else {\n        console.log(\"WNP DEBUG\", \"Listening on \" + location.hostname + \":80\");\n        window.socket = io.connect(\":80\");\n    }\n    // Set references to the UI elements\n    this.setUIReferences();\n    // Set tick handlers\n    this.setTickHandlers();\n    // Set Socket.IO definitions\n    this.setSocketDefinitions();\n    // Set UI event listeners\n    this.setUIListeners();\n    // Initial calls, wait a bit for socket to start\n    setTimeout(()=>{\n        this.r.tickServerSettingsUp.classList.add(\"tickAnimate\");\n        socket.emit(\"server-settings\");\n        this.r.tickDevicesGetUp.classList.add(\"tickAnimate\");\n        socket.emit(\"devices-get\");\n    }, 500);\n};\n/**\r\n * Reference to the UI elements of the app.\r\n * @returns {undefined}\r\n */ WNP.setUIReferences = function() {\n    console.log(\"WNP DEBUG\", \"Set UI references...\");\n    function addElementToRef(id) {\n        const element = document.getElementById(id);\n        if (element) WNP.r[id] = element;\n        else console.warn(\"WNP DEBUG\", `Element with ID '${id}' not found.`);\n    }\n    // Set references to the UI elements\n    this.s.aDeviceUI.forEach((id)=>{\n        addElementToRef(id);\n    });\n    this.s.aServerUI.forEach((id)=>{\n        addElementToRef(id);\n    });\n    this.s.aTicksUI.forEach((id)=>{\n        addElementToRef(id);\n    });\n    this.s.aDebugUI.forEach((id)=>{\n        addElementToRef(id);\n    });\n};\n/**\r\n * Set the tick event handlers for the app.\r\n * @returns {undefined}\r\n */ WNP.setTickHandlers = function() {\n    function removeTickAnimate(e) {\n        e.target.classList.remove(\"tickAnimate\");\n    }\n    // Set the tick handlers for the app\n    this.s.aTicksUI.forEach((tick)=>{\n        if (this.r[tick]) this.r[tick].addEventListener(\"animationend\", removeTickAnimate);\n        else console.warn(\"WNP DEBUG\", `Element with ID '${tick}' not found.`);\n    });\n};\n/**\r\n * Setting the listeners on the UI elements of the app.\r\n * @returns {undefined}\r\n */ WNP.setUIListeners = function() {\n    console.log(\"WNP DEBUG\", \"Set UI Listeners...\");\n    // ------------------------------------------------\n    // Buttons\n    this.r.btnRefresh.addEventListener(\"click\", function() {\n        WNP.r.tickDevicesRefreshUp.classList.add(\"tickAnimate\");\n        socket.emit(\"devices-refresh\");\n        // Wait for discovery to finish\n        setTimeout(()=>{\n            WNP.r.tickDevicesGetUp.classList.add(\"tickAnimate\");\n            socket.emit(\"devices-get\");\n            WNP.r.tickServerSettingsUp.classList.add(\"tickAnimate\");\n            socket.emit(\"server-settings\");\n        }, 5000);\n    });\n    this.r.selDeviceChoices.addEventListener(\"change\", function() {\n        WNP.r.tickDeviceSetUp.classList.add(\"tickAnimate\");\n        socket.emit(\"device-set\", this.value);\n    });\n    this.r.btnReboot.addEventListener(\"click\", function() {\n        socket.emit(\"server-reboot\");\n    });\n    this.r.btnUpdate.addEventListener(\"click\", function() {\n        socket.emit(\"server-update\");\n    });\n    this.r.btnShutdown.addEventListener(\"click\", function() {\n        socket.emit(\"server-shutdown\");\n    });\n    this.r.btnReloadUI.addEventListener(\"click\", function() {\n        location.reload();\n    });\n    this.r.btnDevices.addEventListener(\"click\", function() {\n        WNP.r.tickDevicesGetUp.classList.add(\"tickAnimate\");\n        socket.emit(\"devices-get\");\n    });\n};\n/**\r\n * Set the socket definitions to listen for specific websocket traffic and handle accordingly.\r\n * @returns {undefined}\r\n */ WNP.setSocketDefinitions = function() {\n    console.log(\"WNP DEBUG\", \"Setting Socket definitions...\");\n    // On server settings\n    socket.on(\"server-settings\", function(msg) {\n        console.log(\"IO: server-settings\", msg);\n        WNP.r.tickServerSettingsDown.classList.add(\"tickAnimate\");\n        // Store server settings\n        WNP.d.serverSettings = msg;\n        WNP.r.sServerSettings.innerHTML = JSON.stringify(msg);\n        // RPi has bash, so possibly able to reboot/shutdown.\n        if (msg && msg.os && msg.os.userInfo && msg.os.userInfo.shell === \"/bin/bash\") {\n            WNP.r.btnReboot.disabled = false;\n            WNP.r.btnUpdate.disabled = false;\n            WNP.r.btnShutdown.disabled = false;\n        }\n        // Set device name\n        WNP.r.sFriendlyname.children[0].innerText = msg && msg.selectedDevice && msg.selectedDevice.friendlyName ? msg.selectedDevice.friendlyName : \"-\";\n        WNP.r.sManufacturer.children[0].innerText = msg && msg.selectedDevice && msg.selectedDevice.manufacturer ? msg.selectedDevice.manufacturer : \"-\";\n        WNP.r.sModelName.children[0].innerText = msg && msg.selectedDevice && msg.selectedDevice.modelName ? msg.selectedDevice.modelName : \"-\";\n        WNP.r.sLocation.children[0].innerText = msg && msg.selectedDevice && msg.selectedDevice.location ? msg.selectedDevice.location : \"-\";\n        // Set the server url(s)\n        if (msg && msg.os && msg.os.hostname) {\n            var sUrl = \"http://\" + msg.os.hostname.toLowerCase() + \".local\";\n            sUrl += msg.server && msg.server.port && msg.server.port != 80 ? \":\" + msg.server.port + \"/\" : \"/\";\n            WNP.r.sServerUrlHostname.children[0].innerText = sUrl;\n        } else WNP.r.sServerUrlHostname.children[0].innerText = \"-\";\n        if (msg && msg.selectedDevice && msg.selectedDevice.location && msg.os && msg.os.networkInterfaces) {\n            // Grab the ip address pattern of the selected device\n            // Assumption is that the wiim-now-playing server is on the same ip range as the client..\n            var sLocationIp = msg.selectedDevice.location.split(\"/\")[2]; // Extract ip address from location\n            var aIpAddress = sLocationIp.split(\".\"); // Split ip address in parts\n            aIpAddress.pop(); // Remove the last part\n            var sIpPattern = aIpAddress.join(\".\"); // Construct ip address pattern\n            // Search for server ip address(es) in this range...\n            Object.keys(msg.os.networkInterfaces).forEach(function(key, index) {\n                var sIpFound = msg.os.networkInterfaces[key].find((addr)=>addr.address.startsWith(sIpPattern));\n                if (sIpFound) {\n                    // Construct ip address and optional port\n                    var sUrl = \"http://\" + sIpFound.address;\n                    sUrl += msg.server && msg.server.port && msg.server.port != 80 ? \":\" + msg.server.port + \"/\" : \"/\";\n                    WNP.r.sServerUrlIP.children[0].innerText = sUrl;\n                }\n            });\n        } else WNP.r.sServerUrlIP.children[0].innerText = \"-\";\n    });\n    // On devices get\n    socket.on(\"devices-get\", function(msg) {\n        console.log(\"IO: devices-get\", msg);\n        WNP.r.tickDevicesGetDown.classList.add(\"tickAnimate\");\n        // Store and sort device list\n        WNP.d.deviceList = msg;\n        WNP.d.deviceList.sort((a, b)=>{\n            return a.friendlyName < b.friendlyName ? -1 : 1;\n        });\n        // Clear choices\n        WNP.r.selDeviceChoices.innerHTML = \"<option value=\\\"\\\">Select a device...</em></li>\";\n        // Add WiiM devices\n        var devicesWiiM = WNP.d.deviceList.filter((d)=>{\n            return d.manufacturer.startsWith(\"Linkplay\");\n        });\n        if (devicesWiiM.length > 0) {\n            var optGroup = document.createElement(\"optgroup\");\n            optGroup.label = \"WiiM devices\";\n            devicesWiiM.forEach((device)=>{\n                var opt = document.createElement(\"option\");\n                opt.value = device.location;\n                opt.innerText = device.friendlyName;\n                opt.title = \"By \" + device.manufacturer;\n                if (WNP.d.serverSettings && WNP.d.serverSettings.selectedDevice && WNP.d.serverSettings.selectedDevice.location === device.location) opt.setAttribute(\"selected\", \"selected\");\n                optGroup.appendChild(opt);\n            });\n            WNP.r.selDeviceChoices.appendChild(optGroup);\n        }\n        // Other devices\n        var devicesOther = WNP.d.deviceList.filter((d)=>{\n            return !d.manufacturer.startsWith(\"Linkplay\");\n        });\n        if (devicesOther.length > 0) {\n            var optGroup = document.createElement(\"optgroup\");\n            optGroup.label = \"Other devices\";\n            devicesOther.forEach((device)=>{\n                var opt = document.createElement(\"option\");\n                opt.value = device.location;\n                opt.innerText = device.friendlyName;\n                opt.title = \"By \" + device.manufacturer;\n                if (WNP.d.serverSettings && WNP.d.serverSettings.selectedDevice && WNP.d.serverSettings.selectedDevice.location === device.location) opt.setAttribute(\"selected\", \"selected\");\n                optGroup.appendChild(opt);\n            });\n            WNP.r.selDeviceChoices.appendChild(optGroup);\n        }\n        if (devicesWiiM.length == 0 && devicesOther.length == 0) WNP.r.selDeviceChoices.innerHTML = \"<option disabled=\\\"disabled\\\">No devices found!</em></li>\";\n    });\n    // On state\n    socket.on(\"state\", function(msg) {\n        if (!msg) return false;\n        // console.log(\"IO: state\", msg);\n        WNP.r.tickStateDown.classList.add(\"tickAnimate\");\n        WNP.r.state.innerHTML = JSON.stringify(msg);\n        if (msg && msg.stateTimeStamp && msg.metadataTimeStamp) {\n            var timeStampDiff = msg.stateTimeStamp && msg.metadataTimeStamp ? Math.round((msg.stateTimeStamp - msg.metadataTimeStamp) / 1000) : 0;\n            WNP.r.sTimeStampDiff.innerHTML = timeStampDiff + \"s\";\n        } else WNP.r.sTimeStampDiff.innerHTML = \"\";\n    });\n    // On metadata\n    socket.on(\"metadata\", function(msg) {\n        // console.log(\"IO: metadata\", msg);\n        WNP.r.tickMetadataDown.classList.add(\"tickAnimate\");\n        WNP.r.metadata.innerHTML = JSON.stringify(msg);\n        WNP.r.sTitle.children[0].innerText = msg && msg.trackMetaData && msg.trackMetaData[\"dc:title\"] ? msg.trackMetaData[\"dc:title\"] : \"-\";\n        WNP.r.sArtist.children[0].innerText = msg && msg.trackMetaData && msg.trackMetaData[\"upnp:artist\"] ? msg.trackMetaData[\"upnp:artist\"] : \"-\";\n        WNP.r.sAlbum.children[0].innerText = msg && msg.trackMetaData && msg.trackMetaData[\"upnp:album\"] ? msg.trackMetaData[\"upnp:album\"] : \"-\";\n        WNP.r.sAlbumArtUri.children[0].innerText = msg && msg.trackMetaData && msg.trackMetaData[\"upnp:albumArtURI\"] ? msg.trackMetaData[\"upnp:albumArtURI\"] : \"-\";\n        WNP.r.sSubtitle.children[0].innerText = msg && msg.trackMetaData && msg.trackMetaData[\"dc:subtitle\"] ? msg.trackMetaData[\"dc:subtitle\"] : \"-\";\n    });\n    // On device set\n    socket.on(\"device-set\", function(msg) {\n        console.log(\"IO: device-set\", msg);\n        WNP.r.tickDeviceSetDown.classList.add(\"tickAnimate\");\n        // Device wissel? Haal 'alles' opnieuw op\n        WNP.r.tickServerSettingsUp.classList.add(\"tickAnimate\");\n        socket.emit(\"server-settings\");\n        WNP.r.tickDevicesGetUp.classList.add(\"tickAnimate\");\n        socket.emit(\"devices-get\");\n    });\n    // On device refresh\n    socket.on(\"devices-refresh\", function(msg) {\n        console.log(\"IO: devices-refresh\", msg);\n        WNP.r.tickDevicesRefreshDown.classList.add(\"tickAnimate\");\n        WNP.r.selDeviceChoices.innerHTML = \"<option disabled=\\\"disabled\\\">Waiting for devices...</em></li>\";\n    });\n    // On devices update manual\n    socket.on(\"devices-update-manual\", function(msg) {\n        console.log(\"IO: devices-update-manual\", msg);\n        WNP.r.tickSaveDevicesDown.classList.add(\"tickAnimate\");\n        socket.emit(\"devices-get\");\n        // Hide add device modal\n        let modal = bootstrap.Modal.getInstance(addDeviceModal);\n        modal.hide();\n    });\n};\n/**\r\n * Remove device from the list of manually added devices.\r\n * @param {number} n - The index of the device to remove.\r\n * @returns {undefined}\r\n */ WNP.RemoveDevice = function(n) {\n    console.log(\"REMOVE DEVICE\", n);\n};\n// =======================================================\n// Start WiiM Now Playing debugger\nWNP.Init();\n\n\n//# sourceMappingURL=debug.823d79c6.js.map\n","// =======================================================\r\n// WiiM Now Playing (Debug)\r\n// Debugging script for the WiiM Now Playing server\r\n\r\n// Namespacing\r\nwindow.WNP = window.WNP || {};\r\n\r\n// Default settings\r\nWNP.s = {\r\n    // Device selection\r\n    aDeviceUI: [\"btnRefresh\", \"selDeviceChoices\", \"btnDevices\"],\r\n    // Server actions to be used in the app\r\n    aServerUI: [\"btnReboot\", \"btnUpdate\", \"btnShutdown\", \"btnReloadUI\"],\r\n    // Ticks to be used in the app (debug)\r\n    aTicksUI: [\"tickDevicesGetUp\", \"tickDevicesRefreshUp\", \"tickServerSettingsUp\", \"tickStateUp\", \"tickStateDown\", \"tickMetadataUp\", \"tickMetadataDown\", \"tickDeviceSetUp\", \"tickDeviceSetDown\", \"tickServerSettingsDown\", \"tickDevicesGetDown\", \"tickDevicesRefreshDown\"],\r\n    // Debug UI elements\r\n    aDebugUI: [\"state\", \"metadata\", \"sServerSettings\", \"sFriendlyname\", \"sManufacturer\", \"sModelName\", \"sLocation\", \"sServerUrlHostname\", \"sServerUrlIP\", \"sTimeStampDiff\", \"sTitle\", \"sArtist\", \"sAlbum\", \"sAlbumArtUri\", \"sSubtitle\"]\r\n};\r\n\r\n// Data placeholders.\r\nWNP.d = {\r\n    serverSettings: null,\r\n    deviceList: null\r\n};\r\n\r\n// Reference placeholders.\r\n// These are set in the init function\r\n// and are used to reference the UI elements in the app.\r\nWNP.r = {};\r\n\r\n/**\r\n * Initialisation of app.\r\n * @returns {undefined}\r\n */\r\nWNP.Init = function () {\r\n    console.log(\"WNP DEBUG\", \"Initialising...\");\r\n\r\n    // Init Socket.IO, connect to port where server resides\r\n    // Normally on port 80, but in cases where another port is chosen adapt\r\n    if (location.port != \"80\" && location.port != \"1234\") {\r\n        console.log(\"WNP DEBUG\", \"Listening on \" + location.href)\r\n        window.socket = io.connect(\":\" + location.port);\r\n    }\r\n    else {\r\n        console.log(\"WNP DEBUG\", \"Listening on \" + location.hostname + \":80\")\r\n        window.socket = io.connect(\":80\");\r\n    }\r\n\r\n    // Set references to the UI elements\r\n    this.setUIReferences();\r\n\r\n    // Set tick handlers\r\n    this.setTickHandlers();\r\n\r\n    // Set Socket.IO definitions\r\n    this.setSocketDefinitions();\r\n\r\n    // Set UI event listeners\r\n    this.setUIListeners();\r\n\r\n    // Initial calls, wait a bit for socket to start\r\n    setTimeout(() => {\r\n        this.r.tickServerSettingsUp.classList.add(\"tickAnimate\");\r\n        socket.emit(\"server-settings\");\r\n        this.r.tickDevicesGetUp.classList.add(\"tickAnimate\");\r\n        socket.emit(\"devices-get\");\r\n    }, 500);\r\n\r\n};\r\n\r\n/**\r\n * Reference to the UI elements of the app.\r\n * @returns {undefined}\r\n */\r\nWNP.setUIReferences = function () {\r\n    console.log(\"WNP DEBUG\", \"Set UI references...\")\r\n\r\n    function addElementToRef(id) {\r\n        const element = document.getElementById(id);\r\n        if (element) {\r\n            WNP.r[id] = element;\r\n        } else {\r\n            console.warn(\"WNP DEBUG\", `Element with ID '${id}' not found.`);\r\n        }\r\n    }\r\n\r\n    // Set references to the UI elements\r\n    this.s.aDeviceUI.forEach((id) => { addElementToRef(id); });\r\n    this.s.aServerUI.forEach((id) => { addElementToRef(id); });\r\n    this.s.aTicksUI.forEach((id) => { addElementToRef(id); });\r\n    this.s.aDebugUI.forEach((id) => { addElementToRef(id); });\r\n\r\n};\r\n\r\n/**\r\n * Set the tick event handlers for the app.\r\n * @returns {undefined}\r\n */\r\nWNP.setTickHandlers = function () {\r\n\r\n    function removeTickAnimate(e) {\r\n        e.target.classList.remove(\"tickAnimate\");\r\n    }\r\n\r\n    // Set the tick handlers for the app\r\n    this.s.aTicksUI.forEach((tick) => {\r\n        if (this.r[tick]) {\r\n            this.r[tick].addEventListener(\"animationend\", removeTickAnimate);\r\n        } else {\r\n            console.warn(\"WNP DEBUG\", `Element with ID '${tick}' not found.`);\r\n        }\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Setting the listeners on the UI elements of the app.\r\n * @returns {undefined}\r\n */\r\nWNP.setUIListeners = function () {\r\n    console.log(\"WNP DEBUG\", \"Set UI Listeners...\")\r\n\r\n    // ------------------------------------------------\r\n    // Buttons\r\n\r\n    this.r.btnRefresh.addEventListener(\"click\", function () {\r\n        WNP.r.tickDevicesRefreshUp.classList.add(\"tickAnimate\");\r\n        socket.emit(\"devices-refresh\");\r\n        // Wait for discovery to finish\r\n        setTimeout(() => {\r\n            WNP.r.tickDevicesGetUp.classList.add(\"tickAnimate\");\r\n            socket.emit(\"devices-get\");\r\n            WNP.r.tickServerSettingsUp.classList.add(\"tickAnimate\");\r\n            socket.emit(\"server-settings\");\r\n        }, 5000);\r\n    });\r\n\r\n    this.r.selDeviceChoices.addEventListener(\"change\", function () {\r\n        WNP.r.tickDeviceSetUp.classList.add(\"tickAnimate\");\r\n        socket.emit(\"device-set\", this.value);\r\n    });\r\n\r\n    this.r.btnReboot.addEventListener(\"click\", function () {\r\n        socket.emit(\"server-reboot\");\r\n    });\r\n\r\n    this.r.btnUpdate.addEventListener(\"click\", function () {\r\n        socket.emit(\"server-update\");\r\n    });\r\n\r\n    this.r.btnShutdown.addEventListener(\"click\", function () {\r\n        socket.emit(\"server-shutdown\");\r\n    });\r\n\r\n    this.r.btnReloadUI.addEventListener(\"click\", function () {\r\n        location.reload();\r\n    });\r\n\r\n    this.r.btnDevices.addEventListener(\"click\", function () {\r\n        WNP.r.tickDevicesGetUp.classList.add(\"tickAnimate\");\r\n        socket.emit(\"devices-get\");\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Set the socket definitions to listen for specific websocket traffic and handle accordingly.\r\n * @returns {undefined}\r\n */\r\nWNP.setSocketDefinitions = function () {\r\n    console.log(\"WNP DEBUG\", \"Setting Socket definitions...\")\r\n\r\n    // On server settings\r\n    socket.on(\"server-settings\", function (msg) {\r\n        console.log(\"IO: server-settings\", msg);\r\n        WNP.r.tickServerSettingsDown.classList.add(\"tickAnimate\");\r\n\r\n        // Store server settings\r\n        WNP.d.serverSettings = msg;\r\n        WNP.r.sServerSettings.innerHTML = JSON.stringify(msg);\r\n\r\n        // RPi has bash, so possibly able to reboot/shutdown.\r\n        if (msg && msg.os && msg.os.userInfo && msg.os.userInfo.shell === \"/bin/bash\") {\r\n            WNP.r.btnReboot.disabled = false;\r\n            WNP.r.btnUpdate.disabled = false;\r\n            WNP.r.btnShutdown.disabled = false;\r\n        };\r\n\r\n        // Set device name\r\n        WNP.r.sFriendlyname.children[0].innerText = (msg && msg.selectedDevice && msg.selectedDevice.friendlyName) ? msg.selectedDevice.friendlyName : \"-\";\r\n        WNP.r.sManufacturer.children[0].innerText = (msg && msg.selectedDevice && msg.selectedDevice.manufacturer) ? msg.selectedDevice.manufacturer : \"-\";\r\n        WNP.r.sModelName.children[0].innerText = (msg && msg.selectedDevice && msg.selectedDevice.modelName) ? msg.selectedDevice.modelName : \"-\";\r\n        WNP.r.sLocation.children[0].innerText = (msg && msg.selectedDevice && msg.selectedDevice.location) ? msg.selectedDevice.location : \"-\";\r\n\r\n        // Set the server url(s)\r\n        if (msg && msg.os && msg.os.hostname) {\r\n            var sUrl = \"http://\" + msg.os.hostname.toLowerCase() + \".local\";\r\n            sUrl += (msg.server && msg.server.port && msg.server.port != 80) ? \":\" + msg.server.port + \"/\" : \"/\";\r\n            WNP.r.sServerUrlHostname.children[0].innerText = sUrl;\r\n        }\r\n        else {\r\n            WNP.r.sServerUrlHostname.children[0].innerText = \"-\";\r\n        }\r\n        if (msg && msg.selectedDevice && msg.selectedDevice.location && msg.os && msg.os.networkInterfaces) {\r\n            // Grab the ip address pattern of the selected device\r\n            // Assumption is that the wiim-now-playing server is on the same ip range as the client..\r\n            var sLocationIp = msg.selectedDevice.location.split(\"/\")[2]; // Extract ip address from location\r\n            var aIpAddress = sLocationIp.split(\".\"); // Split ip address in parts\r\n            aIpAddress.pop(); // Remove the last part\r\n            var sIpPattern = aIpAddress.join(\".\"); // Construct ip address pattern\r\n            // Search for server ip address(es) in this range...\r\n            Object.keys(msg.os.networkInterfaces).forEach(function (key, index) {\r\n                var sIpFound = msg.os.networkInterfaces[key].find(addr => addr.address.startsWith(sIpPattern))\r\n                if (sIpFound) {\r\n                    // Construct ip address and optional port\r\n                    var sUrl = \"http://\" + sIpFound.address;\r\n                    sUrl += (msg.server && msg.server.port && msg.server.port != 80) ? \":\" + msg.server.port + \"/\" : \"/\";\r\n                    WNP.r.sServerUrlIP.children[0].innerText = sUrl;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            WNP.r.sServerUrlIP.children[0].innerText = \"-\";\r\n        }\r\n\r\n    });\r\n\r\n    // On devices get\r\n    socket.on(\"devices-get\", function (msg) {\r\n        console.log(\"IO: devices-get\", msg);\r\n        WNP.r.tickDevicesGetDown.classList.add(\"tickAnimate\");\r\n\r\n        // Store and sort device list\r\n        WNP.d.deviceList = msg;\r\n        WNP.d.deviceList.sort((a, b) => { return (a.friendlyName < b.friendlyName) ? -1 : 1 });\r\n\r\n        // Clear choices\r\n        WNP.r.selDeviceChoices.innerHTML = \"<option value=\\\"\\\">Select a device...</em></li>\";\r\n\r\n        // Add WiiM devices\r\n        var devicesWiiM = WNP.d.deviceList.filter((d) => { return d.manufacturer.startsWith(\"Linkplay\") });\r\n        if (devicesWiiM.length > 0) {\r\n            var optGroup = document.createElement(\"optgroup\");\r\n            optGroup.label = \"WiiM devices\";\r\n            devicesWiiM.forEach((device) => {\r\n                var opt = document.createElement(\"option\");\r\n                opt.value = device.location;\r\n                opt.innerText = device.friendlyName;\r\n                opt.title = \"By \" + device.manufacturer;\r\n                if (WNP.d.serverSettings && WNP.d.serverSettings.selectedDevice && WNP.d.serverSettings.selectedDevice.location === device.location) {\r\n                    opt.setAttribute(\"selected\", \"selected\");\r\n                };\r\n                optGroup.appendChild(opt);\r\n            })\r\n            WNP.r.selDeviceChoices.appendChild(optGroup);\r\n        };\r\n\r\n        // Other devices\r\n        var devicesOther = WNP.d.deviceList.filter((d) => { return !d.manufacturer.startsWith(\"Linkplay\") });\r\n        if (devicesOther.length > 0) {\r\n            var optGroup = document.createElement(\"optgroup\");\r\n            optGroup.label = \"Other devices\";\r\n            devicesOther.forEach((device) => {\r\n                var opt = document.createElement(\"option\");\r\n                opt.value = device.location;\r\n                opt.innerText = device.friendlyName;\r\n                opt.title = \"By \" + device.manufacturer;\r\n                if (WNP.d.serverSettings && WNP.d.serverSettings.selectedDevice && WNP.d.serverSettings.selectedDevice.location === device.location) {\r\n                    opt.setAttribute(\"selected\", \"selected\");\r\n                };\r\n                optGroup.appendChild(opt);\r\n            })\r\n            WNP.r.selDeviceChoices.appendChild(optGroup);\r\n\r\n        };\r\n\r\n        if (devicesWiiM.length == 0 && devicesOther.length == 0) {\r\n            WNP.r.selDeviceChoices.innerHTML = \"<option disabled=\\\"disabled\\\">No devices found!</em></li>\";\r\n        };\r\n\r\n    });\r\n\r\n    // On state\r\n    socket.on(\"state\", function (msg) {\r\n        if (!msg) { return false; }\r\n        // console.log(\"IO: state\", msg);\r\n\r\n        WNP.r.tickStateDown.classList.add(\"tickAnimate\");\r\n        WNP.r.state.innerHTML = JSON.stringify(msg);\r\n        if (msg && msg.stateTimeStamp && msg.metadataTimeStamp) {\r\n            var timeStampDiff = (msg.stateTimeStamp && msg.metadataTimeStamp) ? Math.round((msg.stateTimeStamp - msg.metadataTimeStamp) / 1000) : 0;\r\n            WNP.r.sTimeStampDiff.innerHTML = timeStampDiff + \"s\";\r\n        }\r\n        else {\r\n            WNP.r.sTimeStampDiff.innerHTML = \"\";\r\n        }\r\n    });\r\n\r\n    // On metadata\r\n    socket.on(\"metadata\", function (msg) {\r\n        // console.log(\"IO: metadata\", msg);\r\n        WNP.r.tickMetadataDown.classList.add(\"tickAnimate\");\r\n        WNP.r.metadata.innerHTML = JSON.stringify(msg);\r\n        WNP.r.sTitle.children[0].innerText = (msg && msg.trackMetaData && msg.trackMetaData[\"dc:title\"]) ? msg.trackMetaData[\"dc:title\"] : \"-\";\r\n        WNP.r.sArtist.children[0].innerText = (msg && msg.trackMetaData && msg.trackMetaData[\"upnp:artist\"]) ? msg.trackMetaData[\"upnp:artist\"] : \"-\";\r\n        WNP.r.sAlbum.children[0].innerText = (msg && msg.trackMetaData && msg.trackMetaData[\"upnp:album\"]) ? msg.trackMetaData[\"upnp:album\"] : \"-\";\r\n        WNP.r.sAlbumArtUri.children[0].innerText = (msg && msg.trackMetaData && msg.trackMetaData[\"upnp:albumArtURI\"]) ? msg.trackMetaData[\"upnp:albumArtURI\"] : \"-\";\r\n        WNP.r.sSubtitle.children[0].innerText = (msg && msg.trackMetaData && msg.trackMetaData[\"dc:subtitle\"]) ? msg.trackMetaData[\"dc:subtitle\"] : \"-\";\r\n    });\r\n\r\n    // On device set\r\n    socket.on(\"device-set\", function (msg) {\r\n        console.log(\"IO: device-set\", msg);\r\n        WNP.r.tickDeviceSetDown.classList.add(\"tickAnimate\");\r\n        // Device wissel? Haal 'alles' opnieuw op\r\n        WNP.r.tickServerSettingsUp.classList.add(\"tickAnimate\");\r\n        socket.emit(\"server-settings\");\r\n        WNP.r.tickDevicesGetUp.classList.add(\"tickAnimate\");\r\n        socket.emit(\"devices-get\");\r\n    });\r\n\r\n    // On device refresh\r\n    socket.on(\"devices-refresh\", function (msg) {\r\n        console.log(\"IO: devices-refresh\", msg);\r\n        WNP.r.tickDevicesRefreshDown.classList.add(\"tickAnimate\");\r\n        WNP.r.selDeviceChoices.innerHTML = \"<option disabled=\\\"disabled\\\">Waiting for devices...</em></li>\";\r\n    });\r\n\r\n    // On devices update manual\r\n    socket.on(\"devices-update-manual\", function (msg) {\r\n        console.log(\"IO: devices-update-manual\", msg)\r\n        WNP.r.tickSaveDevicesDown.classList.add(\"tickAnimate\");\r\n        socket.emit(\"devices-get\");\r\n        // Hide add device modal\r\n        let modal = bootstrap.Modal.getInstance(addDeviceModal);\r\n        modal.hide();\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Remove device from the list of manually added devices.\r\n * @param {number} n - The index of the device to remove.\r\n * @returns {undefined}\r\n */\r\nWNP.RemoveDevice = function (n) {\r\n    console.log(\"REMOVE DEVICE\", n)\r\n};\r\n\r\n// =======================================================\r\n// Start WiiM Now Playing debugger\r\nWNP.Init();\r\n"],"names":["window","WNP","s","aDeviceUI","aServerUI","aTicksUI","aDebugUI","d","serverSettings","deviceList","r","Init","console","log","location","port","href","socket","io","connect","hostname","setUIReferences","setTickHandlers","setSocketDefinitions","setUIListeners","setTimeout","tickServerSettingsUp","classList","add","emit","tickDevicesGetUp","addElementToRef","id","element","document","getElementById","warn","forEach","removeTickAnimate","e","target","remove","tick","addEventListener","btnRefresh","tickDevicesRefreshUp","selDeviceChoices","tickDeviceSetUp","value","btnReboot","btnUpdate","btnShutdown","btnReloadUI","reload","btnDevices","on","msg","tickServerSettingsDown","sServerSettings","innerHTML","JSON","stringify","os","userInfo","shell","disabled","sFriendlyname","children","innerText","selectedDevice","friendlyName","sManufacturer","manufacturer","sModelName","modelName","sLocation","sUrl","toLowerCase","server","sServerUrlHostname","networkInterfaces","aIpAddress","sLocationIp","split","pop","sIpPattern","join","Object","keys","key","index","sIpFound","find","addr","address","startsWith","sServerUrlIP","tickDevicesGetDown","sort","a","b","devicesWiiM","filter","length","optGroup","createElement","label","device","opt","title","setAttribute","appendChild","devicesOther","tickStateDown","state","stateTimeStamp","metadataTimeStamp","timeStampDiff","Math","round","sTimeStampDiff","tickMetadataDown","metadata","sTitle","trackMetaData","sArtist","sAlbum","sAlbumArtUri","sSubtitle","tickDeviceSetDown","tickDevicesRefreshDown","tickSaveDevicesDown","modal","bootstrap","Modal","getInstance","addDeviceModal","hide","RemoveDevice","n"],"version":3,"file":"debug.823d79c6.js.map"}